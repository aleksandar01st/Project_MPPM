//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using FTN;
    
    
    /// Discribes behaviour specific to tap changers, e.g. how the voltage at the end of a line varies with the load level and compensation of the voltage drop by tap adjustment.
    public class TapChangerControl : RegulatingControl {
        
        /// Maximum allowed regulated voltage on the PT secondary, regardless of line drop compensation. Sometimes referred to as first-house protection.
        private System.Single? cim_limitVoltage;
        
        private const bool isLimitVoltageMandatory = false;
        
        private const string _limitVoltagePrefix = "cim";
        
        /// If true, the line drop compensation is to be applied.
        private System.Boolean? cim_lineDropCompensation;
        
        private const bool isLineDropCompensationMandatory = false;
        
        private const string _lineDropCompensationPrefix = "cim";
        
        /// Line drop compensator resistance setting for normal (forward) power flow.
        private System.Single? cim_lineDropR;
        
        private const bool isLineDropRMandatory = false;
        
        private const string _lineDropRPrefix = "cim";
        
        /// Line drop compensator reactance setting for normal (forward) power flow.
        private System.Single? cim_lineDropX;
        
        private const bool isLineDropXMandatory = false;
        
        private const string _lineDropXPrefix = "cim";
        
        /// Line drop compensator resistance setting for reverse power flow.
        private System.Single? cim_reverseLineDropR;
        
        private const bool isReverseLineDropRMandatory = false;
        
        private const string _reverseLineDropRPrefix = "cim";
        
        /// Line drop compensator reactance setting for reverse power flow.
        private System.Single? cim_reverseLineDropX;
        
        private const bool isReverseLineDropXMandatory = false;
        
        private const string _reverseLineDropXPrefix = "cim";
        
        public virtual float LimitVoltage {
            get {
                return this.cim_limitVoltage.GetValueOrDefault();
            }
            set {
                this.cim_limitVoltage = value;
            }
        }
        
        public virtual bool LimitVoltageHasValue {
            get {
                return this.cim_limitVoltage != null;
            }
        }
        
        public static bool IsLimitVoltageMandatory {
            get {
                return isLimitVoltageMandatory;
            }
        }
        
        public static string LimitVoltagePrefix {
            get {
                return _limitVoltagePrefix;
            }
        }
        
        public virtual bool LineDropCompensation {
            get {
                return this.cim_lineDropCompensation.GetValueOrDefault();
            }
            set {
                this.cim_lineDropCompensation = value;
            }
        }
        
        public virtual bool LineDropCompensationHasValue {
            get {
                return this.cim_lineDropCompensation != null;
            }
        }
        
        public static bool IsLineDropCompensationMandatory {
            get {
                return isLineDropCompensationMandatory;
            }
        }
        
        public static string LineDropCompensationPrefix {
            get {
                return _lineDropCompensationPrefix;
            }
        }
        
        public virtual float LineDropR {
            get {
                return this.cim_lineDropR.GetValueOrDefault();
            }
            set {
                this.cim_lineDropR = value;
            }
        }
        
        public virtual bool LineDropRHasValue {
            get {
                return this.cim_lineDropR != null;
            }
        }
        
        public static bool IsLineDropRMandatory {
            get {
                return isLineDropRMandatory;
            }
        }
        
        public static string LineDropRPrefix {
            get {
                return _lineDropRPrefix;
            }
        }
        
        public virtual float LineDropX {
            get {
                return this.cim_lineDropX.GetValueOrDefault();
            }
            set {
                this.cim_lineDropX = value;
            }
        }
        
        public virtual bool LineDropXHasValue {
            get {
                return this.cim_lineDropX != null;
            }
        }
        
        public static bool IsLineDropXMandatory {
            get {
                return isLineDropXMandatory;
            }
        }
        
        public static string LineDropXPrefix {
            get {
                return _lineDropXPrefix;
            }
        }
        
        public virtual float ReverseLineDropR {
            get {
                return this.cim_reverseLineDropR.GetValueOrDefault();
            }
            set {
                this.cim_reverseLineDropR = value;
            }
        }
        
        public virtual bool ReverseLineDropRHasValue {
            get {
                return this.cim_reverseLineDropR != null;
            }
        }
        
        public static bool IsReverseLineDropRMandatory {
            get {
                return isReverseLineDropRMandatory;
            }
        }
        
        public static string ReverseLineDropRPrefix {
            get {
                return _reverseLineDropRPrefix;
            }
        }
        
        public virtual float ReverseLineDropX {
            get {
                return this.cim_reverseLineDropX.GetValueOrDefault();
            }
            set {
                this.cim_reverseLineDropX = value;
            }
        }
        
        public virtual bool ReverseLineDropXHasValue {
            get {
                return this.cim_reverseLineDropX != null;
            }
        }
        
        public static bool IsReverseLineDropXMandatory {
            get {
                return isReverseLineDropXMandatory;
            }
        }
        
        public static string ReverseLineDropXPrefix {
            get {
                return _reverseLineDropXPrefix;
            }
        }
    }
}
